#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 30, 2019 05:23:51 PM CEST  platform: Linux
#    Apr 30, 2019 05:43:48 PM CEST  platform: Linux
#    May 10, 2019 07:45:27 PM CEST  platform: Linux
#    May 14, 2019 04:28:31 PM CEST  platform: Linux
#    May 14, 2019 04:56:42 PM CEST  platform: Linux

import sys,subprocess,os
sys.path.append(os.getcwd() + '/src')
from nmapIP import IPfinder_all_f as find
from nmapIP import ipForMedusen as ipFM
sys.path.append(os.getcwd() + '/GUI/medusaAttack')
from attack import vp_start_gui as startAttack


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def hardMode():
    global w
    obj = w.Scrolledtext1
    obj2 = w.Entry1
    obj.delete(1.0, tk.END)
    os.system("cat " + os.getcwd() + "/files/nmap/hardmode.l2p > " + os.getcwd() + "/files/nmap/nmapbase.l2p")
    proc = subprocess.Popen("cat " + os.getcwd() + "/files/nmap/hardmode.l2p", stdout=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    obj.insert(tk.END, '\n ------------------------------------------\n \tThe Scanner \n ------------------------------------------\n\n' + out)
    w.Entry2.configure(state='normal')
    w.Entry3.configure(state='normal')
    w.Entry4.configure(state='normal')
    w.Button2.configure(state='normal')
    w.Button3.configure(state='normal')
    w.Button4.configure(state='normal')
    sys.stdout.flush()

def attackMedusaCompo():
    global w
    startAttack()
    sys.stdout.flush()

def attackMedusaSimple():
    on = True
    destroy_window()
    import medusa
    medusa.vp_start_gui()
    import nmap_interface
    nmap_interface.vp_start_gui()

def clear():
    global w
    obj = w.Scrolledtext1
    obj.delete(1.0, tk.END)
    sys.stdout.flush()

def exit():
    destroy_window()
    sys.stdout.flush()

def nmap():
    global w
    obj = w.Scrolledtext1
    obj2 = w.Entry1
    obj.delete(1.0, tk.END)
    #proc = subprocess.Popen("cat /home/alumne/Escriptori/nmap.txt", stdout=subprocess.PIPE, shell=True)
    procc = subprocess.Popen("nmap -A " + obj2.get(), stdout=subprocess.PIPE, shell=True)
    proc = subprocess.Popen("nmap -A " + obj2.get() + "| egrep -E '(Nmap scan)|tcp' > " + os.getcwd() + "/files/nmap/nmapbase.l2p", stdout=subprocess.PIPE, shell=True)
    (out, err) = procc.communicate()
    obj.insert(tk.END, '\n ------------------------------------------\n \tThe Scanner \n ------------------------------------------\n\n' + out)
    w.Entry2.configure(state='normal')
    w.Entry3.configure(state='normal')
    w.Entry4.configure(state='normal')
    w.Button2.configure(state='normal')
    w.Button3.configure(state='normal')
    w.Button4.configure(state='normal')
    sys.stdout.flush()

def attackMedusa():
    print('nmap_interface_support.attackMedusa')
    sys.stdout.flush()

def port():
    global w
    obj = w.Scrolledtext1
    obj2 = w.Entry2
    obj.delete(1.0, tk.END)
    #print(obj2.get())
    obj.insert(tk.END, find(obj2.get(), 'port'))
    sys.stdout.flush()

def protocol():
    global w
    obj = w.Scrolledtext1
    obj2 = w.Entry4
    obj.delete(1.0, tk.END)
    obj.insert(tk.END, find(obj2.get(), 'protocol'))
    sys.stdout.flush()

def service():
    global w
    obj = w.Scrolledtext1
    obj2 = w.Entry3
    obj.delete(1.0, tk.END)
    obj.insert(tk.END, find(obj2.get(), 'service'))
    ipFM(obj2.get())
    sys.stdout.flush()

def boton():
    os.system('gedit ' + os.getcwd() + '/files/nmap/nmap.help')
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

on = None

if __name__ == '__main__':
    import nmap_interface
    nmap_interface.vp_start_gui()
