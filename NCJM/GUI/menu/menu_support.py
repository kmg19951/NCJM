#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 29, 2019 04:23:09 PM CEST  platform: Linux
#    Apr 29, 2019 04:28:50 PM CEST  platform: Linux
#    Apr 29, 2019 04:33:30 PM CEST  platform: Linux
#    Apr 29, 2019 04:52:51 PM CEST  platform: Linux
#    Apr 29, 2019 05:57:18 PM CEST  platform: Linux
#    May 10, 2019 07:16:50 PM CEST  platform: Linux

import sys,subprocess,os, threading, time
sys.path.append(os.getcwd()+'/GUI/nmap')
from nmap_interface import vp_start_gui as nmap_init
sys.path.append(os.getcwd()+'/GUI/john')
from elDestripador import vp_start_gui as john_init
sys.path.append(os.getcwd()+'/GUI/medusa')
from medusa import vp_start_gui as medusa_init
sys.path.append(os.getcwd()+'/GUI/crunch')
from crunch_interface import vp_start_gui as crunch_init
sys.path.append(os.getcwd()+'/GUI/install_requisites')
from instalation_progress_GUI import vp_start_gui as iniciarInstalacion

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def help():
    os.system('gedit ' + os.getcwd() + '/files/main/main.help')
    sys.stdout.flush()

def crunch():
    destroy_window()
    py3 = True
    crunch_init()
    import menu
    menu.vp_start_gui()
    sys.stdout.flush()

def john():
    destroy_window()
    py3 = True
    john_init()
    import menu
    menu.vp_start_gui()
    sys.stdout.flush()

def medusa():
    destroy_window()
    py3 = True
    medusa_init()
    import menu
    menu.vp_start_gui()
    sys.stdout.flush()

def callnmap():
    destroy_window()
    nmap_init()
    import menu
    menu.vp_start_gui()
    sys.stdout.flush()

def install():
    destroy_window()
    #os.system('./GUI/install_requisites/instalation_progress_GUI.py ')
    iniciarInstalacion()
    import menu
    menu.vp_start_gui()
    sys.stdout.flush()

def quit():
    destroy_window()
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    paco = os.system('apt list --installed | grep -e crunch/ -e john/ -e medusa/ -e nmap/ | wc -l > ' + os.getcwd() + '/logs/countPrograms.log')
    f = open(os.getcwd() + "/logs/countPrograms.log","r")
    r = f.read()
    print(r.rstrip())
    if (r.rstrip() == "4"):
        w.Butcamp.configure(state="disabled")
    else:
        w.Butcamp.configure(state="normal")
        w.Button1.configure(state="disabled")
        w.Button2.configure(state="disabled")
        w.Button3.configure(state="disabled")
        w.Button6.configure(state="disabled")

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import menu
    menu.vp_start_gui()
