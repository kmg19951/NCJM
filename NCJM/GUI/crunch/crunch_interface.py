#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    May 10, 2019 07:23:48 PM CEST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import crunch_interface_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    crunch_interface_support.set_Tk_var()
    top = Toplevel1 (root)
    crunch_interface_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    crunch_interface_support.set_Tk_var()
    top = Toplevel1 (w)
    crunch_interface_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x697+651+165")
        top.title("Crunch")
        top.configure(highlightcolor="black")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.75, rely=0.273, height=41, width=78)
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(command=crunch_interface_support.generate)
        self.Button1.configure(text='''Generate''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.35, rely=0.029, height=21, width=179)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Make Wordlist with Crunch''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.1, rely=0.143, height=21, width=28)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Min''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.217, rely=0.143, height=21, width=32)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(text='''Max''')

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.167, rely=0.143,height=23, relwidth=0.043)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry1.configure(selectbackground="#c4c4c4")

        self.Entry1_2 = tk.Entry(top)
        self.Entry1_2.place(relx=0.283, rely=0.143,height=23, relwidth=0.043)
        self.Entry1_2.configure(background="white")
        self.Entry1_2.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry1_2.configure(selectbackground="#c4c4c4")

        self.Entry1_3 = tk.Entry(top)
        self.Entry1_3.place(relx=0.45, rely=0.33,height=23, relwidth=0.277)
        self.Entry1_3.configure(background="white")
        self.Entry1_3.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry1_3.configure(selectbackground="#c4c4c4")
        self.Entry1_3.configure(state='disabled')

        self.Entry1_4 = tk.Entry(top)
        self.Entry1_4.place(relx=0.45, rely=0.287,height=23, relwidth=0.277)
        self.Entry1_4.configure(background="white")
        self.Entry1_4.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry1_4.configure(selectbackground="#c4c4c4")
        self.Entry1_4.configure(state='disabled')

        self.Entry1_6 = tk.Entry(top)
        self.Entry1_6.place(relx=0.45, rely=0.244,height=23, relwidth=0.277)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(state='disabled')

        self.Entry1_8 = tk.Entry(top)
        self.Entry1_8.place(relx=0.6, rely=0.143,height=23, relwidth=0.277)
        self.Entry1_8.configure(background="white")
        self.Entry1_8.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry1_8.configure(selectbackground="#c4c4c4")
        self.Entry1_8.configure(state='disabled')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.05, rely=0.086, relwidth=0.9)

        self.Checkbutton1 = tk.Checkbutton(top)
        self.Checkbutton1.place(relx=0.35, rely=0.143, relheight=0.033
                , relwidth=0.217)
        self.Checkbutton1.configure(activebackground="#f9f9f9")
        self.Checkbutton1.configure(command=crunch_interface_support.destinFile)
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''Destination File''')
        self.Checkbutton1.configure(variable=crunch_interface_support.che64)

        self.Checkbutton1_10 = tk.Checkbutton(top)
        self.Checkbutton1_10.place(relx=0.083, rely=0.251, relheight=0.033
                , relwidth=0.278)
        self.Checkbutton1_10.configure(activebackground="#f9f9f9")
        self.Checkbutton1_10.configure(command=crunch_interface_support.restricChar)
        self.Checkbutton1_10.configure(justify='left')
        self.Checkbutton1_10.configure(text='''Restricted Characters''')
        self.Checkbutton1_10.configure(variable=crunch_interface_support.che65)

        self.Checkbutton1_12 = tk.Checkbutton(top)
        self.Checkbutton1_12.place(relx=0.075, rely=0.33, relheight=0.033
                , relwidth=0.245)
        self.Checkbutton1_12.configure(activebackground="#f9f9f9")
        self.Checkbutton1_12.configure(command=crunch_interface_support.mixedChar)
        self.Checkbutton1_12.configure(justify='left')
        self.Checkbutton1_12.configure(text='''Mixed Characters''')
        self.Checkbutton1_12.configure(variable=crunch_interface_support.che67)

        self.Checkbutton1_14 = tk.Checkbutton(top)
        self.Checkbutton1_14.place(relx=0.083, rely=0.287, relheight=0.033
                , relwidth=0.178)
        self.Checkbutton1_14.configure(activebackground="#f9f9f9")
        self.Checkbutton1_14.configure(command=crunch_interface_support.mixedWord)
        self.Checkbutton1_14.configure(justify='left')
        self.Checkbutton1_14.configure(text='''Mixed Words''')
        self.Checkbutton1_14.configure(variable=crunch_interface_support.che69)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.067, rely=0.43, height=21, width=133)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Custom Crunch''')

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.1, rely=0.201, relwidth=0.783)

        self.TSeparator3 = ttk.Separator(top)
        self.TSeparator3.place(relx=0.1, rely=0.402, relwidth=0.783)

        self.Entry2 = tk.Entry(top)
        self.Entry2.place(relx=0.283, rely=0.43,height=23, relwidth=0.477)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="-family {DejaVu Sans Mono} -size 10")
        self.Entry2.configure(selectbackground="#c4c4c4")

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.783, rely=0.43, height=23, width=58)
        self.Button2.configure(activebackground="#f9f9f9")
        self.Button2.configure(command=crunch_interface_support.buttonperson)
        self.Button2.configure(text='''Â¡GO!''')

        self.TSeparator4 = ttk.Separator(top)
        self.TSeparator4.place(relx=0.1, rely=0.502, relwidth=0.783)

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.1, rely=0.531, relheight=0.369
                , relwidth=0.797)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="-family {DejaVu Sans} -size 10")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap="none")

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.433, rely=0.918, height=31, width=53)
        self.Button3.configure(activebackground="#f9f9f9")
        self.Button3.configure(command=crunch_interface_support.exit)
        self.Button3.configure(text='''Exit''')

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.95, rely=0.014, height=21, width=21)
        self.Button4.configure(command=crunch_interface_support.help)
        self.Button4.configure(text='''?''')
        self.Button4.configure(width=21)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.367, rely=0.968, height=17, width=137)
        self.Label4.configure(font="-family {DejaVu Sans} -size 8")
        self.Label4.configure(text='''Created by: Ivan & Kevin''')

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.post(event.x_root, event.y_root)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()
